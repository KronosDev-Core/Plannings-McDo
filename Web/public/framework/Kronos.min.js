kronos = (...args) => {
  if ("function" == typeof args[0]) {
    const readyFn = args[0];
    document.addEventListener("DOMContentLoaded", readyFn);
  } else if ("string" == typeof args[0] || void 0 === args[0]) {
    const selector = args[0],
      collection = document.querySelectorAll(selector);
    return (
      (collection.css = (...argsCss) => {
        collection.forEach((element) => {
          if ("string" == typeof argsCss[0]) {
            const [property, value] = argsCss;
            "string" == typeof value && (element.style[property] = value);
          }
        });
      }),
      (collection.on = (...argsOn) => {
        if ("string" == typeof argsOn[0]) {
          const [TypeEvent, handler] = argsOn;
          collection.forEach((element) => {
            element.addEventListener(TypeEvent, handler);
          });
        }
      }),
      (collection.off = (...argsOff) => {
        if ("string" == typeof argsOff[0]) {
          const [TypeEvent, handler] = argsOff;
          collection.forEach((element) => {
            element.removeEventListener(TypeEvent, handler);
          });
        }
      }),
      (collection.class = (...argsClass) =>
        collection.forEach((element) => {
          if ("string" == typeof argsClass[0]) {
            const [TypeClass, value] = argsClass;
            if ("string" == typeof value) {
              if ("add" === TypeClass) element.classList.add(value);
              else if ("remove" === TypeClass) element.classList.remove(value);
              else if ("toggle" === TypeClass) element.classList.toggle(value);
              else if ("has" === TypeClass)
                return element.classList.contains(value);
            } else if ("object" == typeof value)
              return value.forEach((data) => {
                if ("add" === TypeClass) element.classList.add(data);
                else if ("remove" === TypeClass) element.classList.remove(data);
                else if ("toggle" === TypeClass) element.classList.toggle(data);
                else if ("has" === TypeClass)
                  return element.classList.contains(data);
              });
          }
        })),
      (collection.attr = (...argsAttr) => {
        if ("string" == typeof argsAttr[0] && "string" == typeof argsAttr[1]) {
          const [TypeAttr, NameAttr, value] = argsAttr;
          return collection.forEach((element) => {
            if ("add" === TypeAttr) element.setAttribute(NameAttr, value);
            else if ("remove" === TypeAttr) element.removeAttribute(NameAttr);
            else if ("toggle" === TypeAttr) element.toggleAttribute(NameAttr);
            else if ("get" === TypeAttr) return element.getAttribute(NameAttr);
          });
        }
      }),
      (collection.hide = () => {
        collection.forEach((element) => {
          element.style.display = "none";
        });
      }),
      (collection.show = () => {
        collection.forEach((element) => {
          element.style.display = "";
        });
      }),
      (collection.toast = (...argsToast) => {
        collection.forEach((element) => {
          "string" == typeof argsToast[0] &&
            ("show" === argsToast[0]
              ? element.classList.add("show")
              : "hide" === argsToast[0]
              ? element.classList.remove("show")
              : "toggle" === argsToast[0] &&
                (element.classList.contains("show")
                  ? element.classList.toggle("show")
                  : element.classList.contains("hide") &&
                    element.classList.toggle("hide")));
        });
      }),
      (collection.html = (...argsHtml) => {
        if ("string" != typeof argsHtml[0])
          return collection.forEach((elem) => element.innerHTML);
        collection.forEach((element) => {
          element.innerHTML = argsHtml[0];
        });
      }),
      (collection.append = (...argsHtml) => {
        void 0 !== argsHtml[0] && "string" == typeof argsHtml[0]
          ? collection.forEach((element) => {
              element.innerHTML = element.innerHTML + argsHtml[0];
            })
          : void 0 !== argsHtml[0] &&
            "object" == typeof argsHtml[0] &&
            collection.forEach((element) => {
              element.appendChild(argsHtml[0]);
            });
      }),
      (collection.remove = () => {
        collection.forEach((element) => {
          element.parentNode.removeChild(element);
        });
      }),
      (collection.trigger = (...argsTrigger) => {
        if ("string" == typeof argsTrigger[0]) {
          var event = document.createEvent("HTMLEvents");
          return (
            event.initEvent(argsTrigger[0], !0, !1),
            collection.forEach((element) => element.dispatchEvent(event))
          );
        }
      }),
      (collection.now = () => Date.now()),
      (collection.keypress = (...argsKey) => {
        var key;
        if ("function" != typeof argsKey[0])
          return (
            window.addEventListener("keypress", (e) => {
              key = e;
            }),
            key
          );
        var Handler = argsKey[0];
        window.addEventListener("keypress", Handler);
      }),
      (collection.request = (...argsRequest) => {
        var type = null,
          url = null,
          data = null,
          handler = null;
        "string" == typeof argsRequest[0] &&
          "string" == typeof argsRequest[1] &&
          "POST" == argsRequest[0] &&
          "object" == typeof argsRequest[2] &&
          "function" == typeof argsRequest[3] &&
          ((type = argsRequest[0]),
          (url = argsRequest[1]),
          (data = JSON.stringify(argsRequest[2])),
          (handler = argsRequest[3]));
        var ajax = new XMLHttpRequest();
        (ajax.onreadystatechange = function () {
          if (4 != this.readyState || 200 != this.status) return this;
          handler(JSON.parse(this.responseText));
        }),
          ajax.open(type, url, !0),
          ajax.setRequestHeader(
            "Content-type",
            "application/json; charset=UTF-8"
          ),
          ajax.send(data);
      }),
      (collection.value = (...argsValue) => {
        var value = "";
        if ("string" == typeof argsValue[0])
          collection.forEach((elem) => {
            elem.value = argsValue[0];
          });
        else {
          if ("number" != typeof argsValue[0])
            return (
              collection.forEach((elem) => {
                value = elem.value;
              }),
              value
            );
          collection.forEach((elem) => (elem.value = argsValue[0]));
        }
      }),
      (collection.name = (...argsName) => {
        var value = "";
        if ("string" != typeof argsName[0])
          return (
            collection.forEach((elem) => {
              value = elem.name;
            }),
            value
          );
        collection.forEach((elem) => {
          elem.name = argsName[0];
        });
      }),
      collection
    );
  }
};
